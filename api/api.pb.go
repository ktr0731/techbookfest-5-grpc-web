// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SimpleRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRequest) Reset()         { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()    {}
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_265a8e865188d3c7, []int{0}
}
func (m *SimpleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRequest.Unmarshal(m, b)
}
func (m *SimpleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRequest.Marshal(b, m, deterministic)
}
func (dst *SimpleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRequest.Merge(dst, src)
}
func (m *SimpleRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleRequest.Size(m)
}
func (m *SimpleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRequest proto.InternalMessageInfo

func (m *SimpleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SimpleResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleResponse) Reset()         { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()    {}
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_265a8e865188d3c7, []int{1}
}
func (m *SimpleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleResponse.Unmarshal(m, b)
}
func (m *SimpleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleResponse.Marshal(b, m, deterministic)
}
func (dst *SimpleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResponse.Merge(dst, src)
}
func (m *SimpleResponse) XXX_Size() int {
	return xxx_messageInfo_SimpleResponse.Size(m)
}
func (m *SimpleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResponse proto.InternalMessageInfo

func (m *SimpleResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SimpleRequest)(nil), "api.SimpleRequest")
	proto.RegisterType((*SimpleResponse)(nil), "api.SimpleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleServiceClient interface {
	Unary(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (SimpleService_ClientStreamingClient, error)
	ServerStreaming(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (SimpleService_ServerStreamingClient, error)
	BidiStreaming(ctx context.Context, opts ...grpc.CallOption) (SimpleService_BidiStreamingClient, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) Unary(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.SimpleService/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (SimpleService_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleService_serviceDesc.Streams[0], "/api.SimpleService/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceClientStreamingClient{stream}
	return x, nil
}

type SimpleService_ClientStreamingClient interface {
	Send(*SimpleRequest) error
	CloseAndRecv() (*SimpleResponse, error)
	grpc.ClientStream
}

type simpleServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *simpleServiceClientStreamingClient) Send(m *SimpleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleServiceClientStreamingClient) CloseAndRecv() (*SimpleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleServiceClient) ServerStreaming(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (SimpleService_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleService_serviceDesc.Streams[1], "/api.SimpleService/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimpleService_ServerStreamingClient interface {
	Recv() (*SimpleResponse, error)
	grpc.ClientStream
}

type simpleServiceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *simpleServiceServerStreamingClient) Recv() (*SimpleResponse, error) {
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleServiceClient) BidiStreaming(ctx context.Context, opts ...grpc.CallOption) (SimpleService_BidiStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleService_serviceDesc.Streams[2], "/api.SimpleService/BidiStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceBidiStreamingClient{stream}
	return x, nil
}

type SimpleService_BidiStreamingClient interface {
	Send(*SimpleRequest) error
	Recv() (*SimpleResponse, error)
	grpc.ClientStream
}

type simpleServiceBidiStreamingClient struct {
	grpc.ClientStream
}

func (x *simpleServiceBidiStreamingClient) Send(m *SimpleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleServiceBidiStreamingClient) Recv() (*SimpleResponse, error) {
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleServiceServer is the server API for SimpleService service.
type SimpleServiceServer interface {
	Unary(context.Context, *SimpleRequest) (*SimpleResponse, error)
	ClientStreaming(SimpleService_ClientStreamingServer) error
	ServerStreaming(*SimpleRequest, SimpleService_ServerStreamingServer) error
	BidiStreaming(SimpleService_BidiStreamingServer) error
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SimpleService/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).Unary(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServiceServer).ClientStreaming(&simpleServiceClientStreamingServer{stream})
}

type SimpleService_ClientStreamingServer interface {
	SendAndClose(*SimpleResponse) error
	Recv() (*SimpleRequest, error)
	grpc.ServerStream
}

type simpleServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *simpleServiceClientStreamingServer) SendAndClose(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleServiceClientStreamingServer) Recv() (*SimpleRequest, error) {
	m := new(SimpleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SimpleService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleServiceServer).ServerStreaming(m, &simpleServiceServerStreamingServer{stream})
}

type SimpleService_ServerStreamingServer interface {
	Send(*SimpleResponse) error
	grpc.ServerStream
}

type simpleServiceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *simpleServiceServerStreamingServer) Send(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SimpleService_BidiStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServiceServer).BidiStreaming(&simpleServiceBidiStreamingServer{stream})
}

type SimpleService_BidiStreamingServer interface {
	Send(*SimpleResponse) error
	Recv() (*SimpleRequest, error)
	grpc.ServerStream
}

type simpleServiceBidiStreamingServer struct {
	grpc.ServerStream
}

func (x *simpleServiceBidiStreamingServer) Send(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleServiceBidiStreamingServer) Recv() (*SimpleRequest, error) {
	m := new(SimpleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _SimpleService_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreaming",
			Handler:       _SimpleService_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreaming",
			Handler:       _SimpleService_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStreaming",
			Handler:       _SimpleService_BidiStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_265a8e865188d3c7) }

var fileDescriptor_api_265a8e865188d3c7 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x52, 0xe6, 0xe2, 0x0d, 0xce,
	0xcc, 0x2d, 0xc8, 0x49, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9,
	0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xb4, 0xb8, 0xf8,
	0x60, 0x8a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b,
	0x13, 0xd3, 0x61, 0x0a, 0x61, 0x5c, 0xa3, 0x66, 0x26, 0x98, 0x89, 0xc1, 0xa9, 0x45, 0x65, 0x99,
	0xc9, 0xa9, 0x42, 0x46, 0x5c, 0xac, 0xa1, 0x79, 0x89, 0x45, 0x95, 0x42, 0x42, 0x7a, 0x20, 0xcb,
	0x51, 0xac, 0x93, 0x12, 0x46, 0x11, 0x83, 0x98, 0xae, 0xc4, 0x20, 0x64, 0xc7, 0xc5, 0xef, 0x9c,
	0x93, 0x99, 0x9a, 0x57, 0x12, 0x5c, 0x52, 0x94, 0x9a, 0x98, 0x9b, 0x99, 0x97, 0x4e, 0x82, 0x6e,
	0x0d, 0x46, 0x90, 0x7e, 0x90, 0xf5, 0xa9, 0x45, 0xe4, 0xe8, 0x37, 0x00, 0xe9, 0xe7, 0x75, 0xca,
	0x4c, 0xc9, 0x24, 0xcf, 0x76, 0x03, 0xc6, 0x24, 0x36, 0x70, 0x10, 0x1b, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0x9e, 0x78, 0x93, 0x6f, 0x01, 0x00, 0x00,
}
